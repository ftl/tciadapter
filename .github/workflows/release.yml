name: Release-Build

on:
  push:
    tags:
      - 'v*.*.*'
jobs:

  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
    - id: version_number
      run: echo "::set-output name=version_number::$(echo '${{github.ref}}' | sed -E 's#refs/tags/v##')"
 
    - name: Set up Go 1.15
      uses: actions/setup-go@v2
      with:
        go-version: 1.15
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
        
    - name: Caching build artifacts and modules
      uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-modules-${{ hashFiles('**/go.sum') }}

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Build
      run: |
        echo "Version ${{ steps.version_number.outputs.version_number }}"
        GOOS=linux GOARCH=amd64 go build -v -ldflags "-X main.version=${{ steps.version_number.outputs.version_number }}" -o ./bin/tciadapter main.go
        GOOS=linux GOARCH=arm GOARM=5 go build -v -ldflags "-X main.version=${{ steps.version_number.outputs.version_number }}" -o ./bin/pitciadapter main.go
        GOOS=windows GOARCH=amd64 go build -v -ldflags "-X main.version=${{ steps.version_number.outputs.version_number }}" -o ./bin/tciadapter.exe main.go

    - name: Test
      run: go test -v -timeout=30s ./...

    - name: Create package structure
      run: |
        mkdir -p ./.debpkg/amd64/usr/bin
        cp ./bin/tciadapter ./.debpkg/amd64/usr/bin/tciadapter
        chmod +x ./.debpkg/amd64/usr/bin/tciadapter
        mkdir -p ./.debpkg/amrhf/usr/bin
        cp ./bin/pitciadapter ./.debpkg/armhf/usr/bin/tciadapter
        chmod +x ./.debpkg/armhf/usr/bin/tciadapter

    - name: Create deb packages
      run: |
        sed -i -E "s#!THE_VERSION!#${{ steps.version_number.outputs.version_number }}#" ./.debpkg/amd64/DEBIAN/control
        dpkg-deb --build ./.debpkg/amd64 .
        sed -i -E "s#!THE_VERSION!#${{ steps.version_number.outputs.version_number }}#" ./.debpkg/armhf/DEBIAN/control
        dpkg-deb --build ./.debpkg/armhf .

    - name: Create versioned windows binary
      run: |
        cp ./bin/tciadapter.exe ./tciadapter-${{ steps.version_number.outputs.version_number }}.exe

    - id: amd64_package_filename
      run: echo "::set-output name=package_filename::$(ls ./tciadapter*amd64.deb | head -n 1)"
    
    - id: armhf_package_filename
      run: echo "::set-output name=package_filename::$(ls ./tciadapter*armhf.deb | head -n 1)"

    - name: 'Upload package for linux_amd64'
      uses: actions/upload-artifact@v2
      with:
        name: tciadapter-package-linux_amd64
        path: ./tciadapter*amd64.deb

    - name: 'Upload package for linux_armhf'
      uses: actions/upload-artifact@v2
      with:
        name: tciadapter-package-linux_armhf
        path: ./tciadapter*armhf.deb

    - name: 'Upload binary for windows'
      uses: actions/upload-artifact@v2
      with:
        name: tciadapter-binary-windows
        path: ./bin/tciadapter.exe

    - name: Upload amd64 package to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ steps.amd64_package_filename.outputs.package_filename }}
        tag: ${{ github.ref }}

    - name: Upload armhf package to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ steps.armhf_package_filename.outputs.package_filename }}
        tag: ${{ github.ref }}

    - name: Upload windows binary to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: tciadapter-${{ steps.version_number.outputs.version_number }}.exe
        tag: ${{ github.ref }}
